# run from project directory
# docker compose -f ./etc/docker-compose/docker-compose.local.all.yml --profile oracle up
# docker compose -f ./etc/docker-compose/docker-compose.local.all.yml --profile pg up
#
# stop from project directory
# docker compose -f ./etc/docker-compose/docker-compose.local.all.yml --profile oracle down
# docker compose -f ./etc/docker-compose/docker-compose.local.all.yml --profile pg down
#
# enter service container
# docker exec -it dookug-document-service /bin/bash
#
# ports:
# dookug-document-service: 8082, 9992, 8789
# module-dookug-oracle: 1521
# module-dookug-postgres: 5432
# prometheus: 9090
# grafana: 3000
# jaeger: 16686
services:
  ######### DB + LIQUIBASE (ORACLE) #########
  module-dookug-oracle:
    profiles: [ "oracle" ]
    extends:
      file: ./docker-compose.local.oracle.yml
      service: module-dookug-oracle

  dookug-liquibase-oracle:
    profiles: [ "oracle" ]
    extends:
      file: ./docker-compose.local.oracle.yml
      service: dookug-liquibase

  ######### DB + LIQUIBASE (POSTGRES) #########
  module-dookug-postgredb:
    profiles: [ "pg" ]
    extends:
      file: ./docker-compose.local.postgredb.yml
      service: module-dookug-postgredb

  # run liquibase main to add objects
  dookug-liquibase-pg-step_1:
    profiles: ["pg"]
    extends:
      file: ./docker-compose.local.postgredb.yml
      service: dookug-liquibase-pg-step_1

  # add partition manager
  dookug-pg_tools-step_01B:
    profiles: ["pg"]
    extends:
      file: ./docker-compose.local.postgredb.yml
      service: dookug-pg_tools-step_01B

  # run liquibase 2
  dookug-liquibase-pg-step_2:
    profiles: ["pg"]
    extends:
      file: ./docker-compose.local.postgredb.yml
      service: dookug-liquibase-pg-step_2

  # add sample data
  dookug-liquibase-pg-sample-data:
    profiles: ["pg"]
    extends:
      file: ./docker-compose.local.postgredb.yml
      service: dookug-liquibase-pg-sample-data

  ######### SERVICE (ORACLE) #########
  dookug-document-service-oracle:
    profiles: [ "oracle" ]
    extends:
      file: ./docker-compose.local.dookug-document-service.oracle.yml
      service: dookug-document-service-developer
    environment:
      LOGSTASH_ENABLED: true
      LOGSTASH_HOST: tcp:graylog
      LOGSTASH_PORT: 12201
    depends_on:
      dookug-liquibase-oracle:
        condition: service_completed_successfully
      graylog:
        condition: service_healthy

  ######### SERVICE (POSTGRES) #########
  dookug-document-service-postgres:
    profiles: [ "pg" ]
    extends:
      file: ./docker-compose.local.dookug-document-service.postgresql.yml
      service: dookug-document-service-developer
    environment:
      LOGSTASH_ENABLED: true
      LOGSTASH_HOST: tcp:graylog
      LOGSTASH_PORT: 12201
    depends_on:
      dookug-liquibase-pg-sample-data:
        condition: service_completed_successfully
      graylog:
          condition: service_healthy

  ######### OBSERVABILITY #########
  prometheus:
    extends:
      file: ./docker-compose.local.observability.yml
      service: prometheus
  grafana:
    extends:
      file: ./docker-compose.local.observability.yml
      service: grafana
  jaeger:
    extends:
      file: ./docker-compose.local.observability.yml
      service: jaeger

  ######### GRAYLOG + DEPENDENCIES #########
  mongo:
    image: mongo:5.0.0
    container_name: mongo
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    ports:
      - '9200:9200'
    environment:
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g
  graylog:
    container_name: graylog
    image: graylog/graylog:5.1.1
    environment:
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:8510/
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000" ]
      interval: 5s
      timeout: 10s
      retries: 30
    restart: always
    depends_on:
      - mongo
      - elasticsearch
    ports:
      # Graylog web interface and REST API
      - '8510:9000'
      # GELF TCP
      - '12201:12201'

  graysetup:
    image: icellmobilsoft/base-curl:${BASE_IMAGE_VERSION}
    depends_on:
      graylog:
        condition: service_healthy
    command:
      - curl
      - -X
      - POST
      - graylog:9000/api/system/inputs
      - -u
      - admin:admin
      - -H
      - "Content-Type: application/json"
      - -H
      - 'X-Requested-By: cli'
      - -d
      - '{"type": "org.graylog2.inputs.gelf.tcp.GELFTCPInput","configuration": {"bind_address": "0.0.0.0","port": 12201,"recv_buffer_size": 1048576,"number_worker_threads": 12,"tls_cert_file": "","tls_key_file": "","tls_enable": false,"tls_key_password": "","tls_client_auth": "disabled","tls_client_auth_cert_file": "","tcp_keepalive": false,"use_null_delimiter": true,"max_message_size": 2097152,"override_source": null,"charset_name": "UTF-8","decompress_size_limit": 8388608},"title": "GlobalGelFInput","global": true}'

networks:
  default:
    external: true
    # if missing: docker network create dookug-local-network
    name: dookug-local-network
volumes:
  module-dookug-postgredb-data:
    name: module-dookug-postgredb-data
  dookug-core-oracle-data:
    name: dookug-core-oracle-data
